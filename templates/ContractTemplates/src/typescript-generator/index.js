#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var plugin_pb_1 = require("google-protobuf/google/protobuf/compiler/plugin_pb");
function mapProtoTypeToTs(protoType) {
    var typeMap = {
        1: "number",
        2: "number",
        3: "number",
        4: "number",
        5: "number",
        6: "number",
        7: "number",
        8: "boolean",
        9: "string",
        10: "Object",
        11: "string",
        12: "number",
        13: "number",
        14: "number",
        15: "number",
        16: "number",
        17: "number",
        18: "number", // TYPE_SINT64
    };
    return protoType ? typeMap[protoType] : "any";
}
function transformType(type) {
    switch (type) {
        case ".google.protobuf.Empty":
            return "void";
        case ".google.protobuf.Int64Value":
            return "BigNumber";
        case ".aelf.Hash":
            return "string";
        case ".google.protobuf.BoolValue":
            return "boolean";
        case ".aelf.Address":
            return "string";
        case ".google.protobuf.Int32Value":
            return "number";
        default:
            return (type === null || type === void 0 ? void 0 : type.slice(1)) || "any";
    }
}
function generateServiceCode(fileDescriptor) {
    var _a;
    var content = "// This file is generated by the protoc-gen-portkey-sdk-client-ts plugin.\n\n";
    // Generate imports and service definition
    content += "import { ContractBasic } from '@portkey/contracts';\n";
    content += "import BigNumber from 'bignumber.js';\n";
    fileDescriptor.getMessageTypeList().forEach(function (message) {
        content += "export interface ".concat(message.getName(), " {\n");
        message.getFieldList().forEach(function (field) {
            var fieldType = mapProtoTypeToTs(field.getType());
            content += "  ".concat(field.getName(), ": ").concat(fieldType, ";\n");
        });
        content += "}\n\n";
    });
    for (var _i = 0, _b = fileDescriptor.getServiceList(); _i < _b.length; _i++) {
        var service = _b[_i];
        // Generate methods for the service
        for (var _c = 0, _d = service.getMethodList(); _c < _d.length; _c++) {
            var method = _d[_c];
            var inputType = transformType(method.getInputType()), outputType = transformType(method.getOutputType()), isGetMethod = (_a = method.getName()) === null || _a === void 0 ? void 0 : _a.startsWith("Get"), withParams = "".concat(inputType === "void" ? "" : ", params: ".concat(inputType));
            if (isGetMethod) {
                content += "export function ".concat(method.getName(), "(contract: ContractBasic").concat(withParams, ") {\n  return contract.callViewMethod<").concat(outputType, ">('").concat(method.getName(), "'").concat(withParams ? ", params" : "", ")\n}\n");
            }
            else {
                content += "export function ".concat(method.getName(), "(contract: ContractBasic, account: string").concat(withParams, ") {\n  return contract.callSendMethod<").concat(outputType, ">('").concat(method.getName(), "', account").concat(withParams ? ", params" : "", ")\n}\n");
            }
        }
    }
    return content;
}
function generateTypeScriptCode(request) {
    var response = new plugin_pb_1.CodeGeneratorResponse();
    // Process each FileDescriptorProto in the CodeGeneratorRequest
    for (var _i = 0, _a = request.getProtoFileList(); _i < _a.length; _i++) {
        var fileDescriptor = _a[_i];
        var content = generateServiceCode(fileDescriptor);
        var fileResponse = new plugin_pb_1.CodeGeneratorResponse.File();
        fileResponse.setName("".concat(fileDescriptor.getName().replace(".proto", ""), "_portkey_sdk_client.ts"));
        fileResponse.setContent(content);
        response.clearFileList();
        response.addFile(fileResponse);
    }
    return response;
}
function main() {
    var pluginRequest = fs.readFileSync(process.stdin.fd);
    var request = plugin_pb_1.CodeGeneratorRequest.deserializeBinary(pluginRequest);
    var response = generateTypeScriptCode(request);
    var serializedResponse = response.serializeBinary();
    process.stdout.write(serializedResponse);
}
main();
